<?php
// $Id: mp_reports.module,v 1.5.2.8 2010/03/20 04:52:50 syndicatestorm Exp $

/**
 * @file
 * Displays an Ubercart marketplace user's reports on sales, orders, etc. 
 *
 * The mp_reports module creates a few table-based reports for an ubercart marketplace store.
 * Marketplace users can view reports for sales between different dates 
 * and products by their views,
 * number sold, and total produced.
 *
 */
 
/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_perm().
 */
function mp_reports_perm() {
  return array('view own reports');
}

/**
 * Implementation of hook_help().
 */
function mp_reports_help($path, $arg) {
  switch ($path) {
    case 'user/%/selling/reports':
      return 
        '<h1 class="title">' . t("Reports") . '</h1>' . 
        '<p>'. t("The following is a list of available reports for viewing your sales.  Click on a report type below to view.") . '</p>';
    case 'user/%/selling/reports/product':
      return 
        '<h1 class="title">' . t("Sales by Product") . '</h1>' . 
        '<div class="help"><p>' . t("Below is a table of sales by product.") . '</p></div>';
    case 'user/%/selling/reports/summary':
      return 
        '<h1 class="title">' . t("Sales Summary") . '</h1>' . 
        '<div class="help"><p>' . t("Below is a summary of your sales.") . '</p></div>';
    case 'admin/store/reports/seller/statuses':
      return '<div class="help">'. t('Below is a list of seller order statuses. The listing only displays those seller orders which are NOT complete. Click on a seller\'s ID to view user page.  Click on an order ID to view order page.') .'</div>';
  }
  if (strpos($path, 'user/%/selling/reports/sales') === 0) {
    $year = (is_null($_GET['year'])) ? format_date(time(), 'custom', "Y") : $_GET['year'];
    return '<h1 class="title">'. t("Sales Per Year") .'</h1>'. '<p>'. t('This is the monthly break down of your sales for the year @year.  You can view your sales for different years by entering a year in the box.', array('@year' => $year)) .'</p>';
  }
}

/**
* Implementation of hook_menu().
*/
function mp_reports_menu() {
  $items = array();

  $items['user/%user/selling/reports/product'] = array(
    'title' => 'by Product',
    'weight' => 2,
    'description' => 'View reports of your product sales.',
    'page callback' => 'mp_reports_products',
    'page arguments' => array(1),
    'access callback' => 'mp_reports_can_view_reports',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mp_reports.admin.inc',
    
  );
  $items['user/%user/selling/reports/sales'] = array(
    'title' => 'by Year',
    'weight' => 3,
    'description' => 'View reports of your sales per year and month.',
    'page callback' => 'mp_reports_sales',
    'page arguments' => array(1),
    'access callback' => 'mp_reports_can_view_reports',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mp_reports.admin.inc',
  );
  $items['user/%user/selling/reports/gettxt/%/%'] = array(
    'page callback' => '_mp_reports_get_csv',
    'page arguments' => array(5, 6),
    'access callback' => 'mp_reports_can_view_reports',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/reports/seller/custom'] = array(
    'title' => 'Seller reports',
    'description' => 'View reports of your sellers and their sales.',
    'page callback' => 'mp_reports_seller',
    'access arguments' => array('view reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mp_reports.admin.inc',
   );
  $items['admin/store/reports/seller/statuses'] = array(
    'title' => 'Seller order status reports',
    'description' => 'View reports of your seller order statuses.',
    'page callback' => 'mp_reports_statuses',
    'access arguments' => array('view reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mp_reports.admin.inc',
  );
  $items['admin/store/reports/seller/payments'] = array(
    'page callback' => 'mp_reports_seller_payments',
    'access arguments' => array('view reports'),
    'type' => MENU_CALLBACK,
    'file' => 'mp_reports.admin.inc',
  );
  $items['admin/store/reports/gettxt/%/%'] = array(
    'page callback' => '_mp_reports_get_txt',
    'page arguments' => array(4, 5),
    'access arguments' => array('view reports'),
    'type' => MENU_CALLBACK,
  );
  $items['masspay/ipn'] = array(
    'title' => 'Masspay IPN',
    'page callback' => 'mp_reports_masspay_ipn',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mp_reports.admin.inc',
  );

  return $items;
}

function mp_reports_can_view_reports($seller) {
  global $user;
  return user_access('view own reports') && ($user->uid == $seller->uid || $user->uid == 1);
}

/**
 * Implementation of hook_user().
 * 
 * Adds seller payment options to seller profile edit pages.
 * Options available are set in mp_products settings page.
 */
function mp_reports_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && $category == 'account') {
    if (user_access('act as seller', $account) && (variable_get('mp_reports_display_email', TRUE) || variable_get('mp_reports_enable_check', FALSE))) {
      $form['payment_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment options'),
      );
      $form['payment_settings']['payment_method'] = array(
        '#title' => t('Preferred payment method'),
        '#description' => t('Select the method you would like to be paid with.  Payments for your product sales will be sent using the selected method.'),
        '#default_value' => $edit['payment_method'],
        '#type' => 'select',
      );
      if (variable_get('mp_reports_display_email', TRUE)) {
        $form['payment_settings']['payment_method']['#options'][] = t('Paypal');
      }
      if (variable_get('mp_reports_enable_check', FALSE)) {
        $form['payment_settings']['payment_method']['#options'][] = t('Check');
      }
      if (variable_get('mp_reports_display_email', TRUE)) {
        $form['payment_settings']['paypal_email'] = array(
          '#title' => t('Paypal email address'),
          '#description' => t('Enter your valid Paypal account email address.  Payment for your product sales will be sent to this address.'),
          '#type' => 'textfield',
          '#default_value' => $edit['paypal_email'],
        );
      }
      if (variable_get('mp_reports_enable_check', FALSE)) {
        $form['payment_settings']['manual_pay_details'] = array(
          '#title' => t('Check payment details'),
          '#description' => t('Enter valid check payment instructions. This should include an address, check recipient identification, etc.'),
          '#type' => 'textarea',
          '#default_value' => $edit['manual_pay_details'],
        );
      }
      return $form;
    }
  }
  elseif ($op == 'validate' && isset($edit['paypal_email'])) {
    if ($edit['payment_method'] == 0) {
      if (!eregi('^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.([a-zA-Z]{2,4})$' , $edit['paypal_email'])) {
        form_set_error('paypal_email', t('Please enter a valid Paypal email address.'));
       }
    }
  }
}

function mp_reports_theme() {
  return array(
    'mp_reports_seller_fieldset' => array(
      'arguments' => array('fieldset' => NULL),
    ),
  );
}

/**
 * Theme handler for mp_reports_seller_form().
 */
function theme_mp_reports_seller_fieldset($fieldset) {
  $output = '';
  $header = array(t('Seller'), t('# of orders'), t('Products sold'), t('Total revenue'), t('Total commission'), t('Payment method'), theme('table_select_header_cell'));
  $rows = array();
  foreach (element_children($fieldset) as $op_id) {
    $row = array();
    $row[] = drupal_render($fieldset[$op_id]['link']);
    $row[] = drupal_render($fieldset[$op_id]['order_data']);
    $row[] = drupal_render($fieldset[$op_id]['product_data']);
    $row[] = drupal_render($fieldset[$op_id]['revenue_count']);
    $row[] = drupal_render($fieldset[$op_id]['commission_count']);
    $row[] = drupal_render($fieldset[$op_id]['payment_method']);
    $row[] = drupal_render($fieldset[$op_id]['checked']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  $output .= drupal_render($fieldset);
  return $output;
}

/**
 * Theme handler for mp_reports_manuals_form().
 */
function theme_mp_reports_manuals_fieldset($fieldset) {
  $output = '';
  $header = array(t('uid'), t('order ids'), t('manual payment details'), t('commission'), theme('table_select_header_cell'));
  $rows = array();
  foreach (element_children($fieldset) as $op_id) {
    $row = array();
    $row[] = drupal_render($fieldset[$op_id]['uid_print']);
    $row[] = drupal_render($fieldset[$op_id]['order_ids_print']);
    $row[] = drupal_render($fieldset[$op_id]['manual_details']);
    $row[] = drupal_render($fieldset[$op_id]['commission_print']);
    $row[] = drupal_render($fieldset[$op_id]['checked']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  $output .= drupal_render($fieldset);
  return $output;
}

/**
 * Overrides _uc_reports_get_sales().
 * @see _uc_reports_get_sales(). *
 */
function mp_reports_get_sales($uid, $time, $period = 'day') {
  $output = array();
  $output['income'] = 0;
  $order_statuses = "('complete')";
  $totalorders = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      switch ($period) {
        default:
        case 'day':
          $output['date'] = format_date($time, 'custom', 'n') .'-'. format_date($time, 'custom', 'j');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') .'-'. format_date($time, 'custom', 'm') .'-'. format_date($time, 'custom', 'd') ."%%\"", $uid, $uid);
        break;
        case 'month':
          $output['date'] = format_date($time, 'custom', 'n');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') .'-'. format_date($time, 'custom', 'm') ."%%\"", $uid, $uid);
        break;
        case 'year':
          $output['date'] = format_date($time, 'custom', 'Y');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') ."-%%\"", $uid, $uid);
        break;
      }
   break;
     case 'pgsql':
       switch ($period) {
        default:
        case 'day':
          $output['date'] = format_date($time, 'custom', 'n') .'-'. format_date($time, 'custom', 'j');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') .'-'. format_date($time, 'custom', 'm') .'-'. format_date($time, 'custom', 'd') ."%%\"", $uid, $uid);
        break;
        case 'month':
          $output['date'] = format_date($time, 'custom', 'n');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') .'-'. format_date($time, 'custom', 'm') ."%%\"", $uid, $uid);
        break;
        case 'year':
          $output['date'] = format_date($time, 'custom', 'Y');
          $orders = db_query("SELECT p.cost, p.qty, sos.order_id FROM {mp_seller_order_statuses} AS sos LEFT JOIN {uc_orders} AS o ON sos.order_id = o.order_id LEFT JOIN {uc_order_products} AS p ON p.order_id = o.order_id LEFT JOIN {node} AS n ON n.nid = p.nid WHERE sos.order_status IN $order_statuses AND n.uid = %d AND sos.uid = %d AND FROM_UNIXTIME(o.created) LIKE \"". format_date($time, 'custom', 'Y') ."-%%\"", $uid, $uid);
        break;
      }
    break;
  }

  while ($order = db_fetch_object($orders)) {
    $output['income'] += $order->cost * $order->qty;
    $totalorders[$order->order_id] = 1;
  }
  
  $output['total'] = sizeof($totalorders);
  $output['total'] = (!empty($output['total'])) ? $output['total'] : 0;
  $output['average'] = ($output['total'] != 0) ? round($output['income'] / $output['total'], 2) : 0;
  return $output;
}

/**
 * Store a txt file for a report in Drupal's cache to be retrieved later
 * @param $report_id
 *   A unique string that identifies the report of the txt file
 * @param $rows
 *   The rows (table header included) that make txt file
 * @return:
 * An array containing the values need to build URL that return the txt file of
 * the report and the txt data itself
 */
function mp_reports_store_txt($report_id, $rows) {
  global $user;
  $user_id = (empty($user->uid)) ? session_id() : $user->uid;
  foreach ($rows as $row) {
    $txt_output .= implode("\t", $row) ."\r\n";
  }
  cache_set('mp_reports_'. $report_id .'_'. $user_id, $txt_output, time() + 86400);
  return array('user' => $user_id, 'report' => $report_id, 'txt' => $txt_output);
}

/**
 * Retrieve a cached txt report & send its data
 *
 * @param $report_id
 *   A unique string that identifies the specific report txt to retrieve
 * @param $user_id
 *   The user id to who's retrieving the report
 *   - (Equals uid for authenticated users)
 *   - (Equals session_id for anonymous users)
 */
function _mp_reports_get_txt($report_id, $user_id) {
  global $user;
  $user_check = (empty($user->uid)) ? session_id() : $user->uid;
  $txt_data = cache_get('mp_reports_'. $report_id .'_'. $user_id, 'cache');

  if (!$txt_data || $user_id != $user_check) {
    drupal_set_message(t("The txt data could not be retreived. It's possible the data might have expired. Refresh the report page and try to retrieve the txt file again."), 'error');
    drupal_not_found();
    exit();
  }
  else {
    ob_end_clean();
    $http_headers = array(
      'Pragma: no-cache',
      'Expires: 0',
      'Cache-Control: no-cache, must-revalidate',
      'Cache-Control: private',
      'Content-Transfer-Encoding: binary',
      'Content-Length:'. strlen($txt_data->data),
      'Content-Disposition: attachment; filename="'. $report_id .'.txt"',
      'Content-Type: text/txt'
    );
    foreach ($http_headers as $header) {
      $header = preg_replace('/\r?\n(?!\t| )/', '', $header);
      drupal_set_header($header);
    }

    print $txt_data->data;
    exit();
  }
}

/**
 * Retrieve a cached CSV report & send its data
 *
 * @param $report_id
 *   A unique string that identifies the specific report CSV to retrieve
 * @param $user_id
 *   The user id to who's retrieving the report
 *   - (Equals uid for authenticated users)
 *   - (Equals session_id for anonymous users)
 */
function _mp_reports_get_csv($report_id, $user_id) {
  global $user;
  $user_check = (empty($user->uid)) ? session_id() : $user->uid;
  $csv_data = cache_get('uc_reports_'. $report_id .'_'. $user_id, 'cache');

  if (!$csv_data || $user_id != $user_check) {
    drupal_set_message(t("The CSV data could not be retreived. It's possible the data might have expired. Refresh the report page and try to retrieve the CSV file again."), 'error');
    drupal_not_found();
    exit();
  }
  else {
    ob_end_clean();
    $http_headers = array(
      'Pragma: no-cache',
      'Expires: 0',
      'Cache-Control: no-cache, must-revalidate',
      'Cache-Control: private',
      'Content-Transfer-Encoding: binary',
      'Content-Length:'. strlen($csv_data->data),
      'Content-Disposition: attachment; filename="'. $report_id .'.csv"',
      'Content-Type: text/csv'
    );
    foreach ($http_headers as $header) {
      $header = preg_replace('/\r?\n(?!\t| )/', '', $header);
      drupal_set_header($header);
    }

    print $csv_data->data;
    exit();
  }
}